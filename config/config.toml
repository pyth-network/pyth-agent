# Configuration for the JRPC API Websocket Server
[pythd_api_server]
# The address on which the websocket API server will listen.
#
# NOTE: non-loopback addresses must be used carefully, making sure the
# connection is not exposed for unauthorized access.
listen_address = "127.0.0.1:8910"

# Configuration for the primary network this agent will publish data to. In most cases this should be a Pythnet endpoint.
[primary_network]
### Required fields ###

# HTTP(S) endpoint of the RPC node. Public RPC endpoints are usually rate-limited, so a private endpoint should be used in most cases.
# Note that api.pythtest.pyth.network is a private endpoint: please contact us for access.
rpc_url = "https://api.pythtest.pyth.network"

# WS(S) endpoint of the RRC node. This is used to subscribe to account changes on the network.
# This can be omitted when oracle.subscriber_enabled is set to false.
# Note that api.pythtest.pyth.network is a private endpoint: please contact us for access.
wss_url = "wss://api.pythtest.pyth.network"

# Path to the keypair used to publish price updates. If set to a
# non-existent file path, the system expects a keypair to be loaded
# via the remote keypair loader. If the path is valid, the remote
# keypair loading is disabled.
key_store.publish_keypair_path = "/path/to/keypair.json"

# Public key of the oracle program
key_store.program_key = "RelevantOracleProgramAddress"

# Public key of the root mapping account
key_store.mapping_key = "RelevantOracleMappingAddress"

### Optional fields of primary/secondary network config ###

# Pubkey of accumulator message buffer program ID. Setting this
# value enables accumulator support on publishing transactions.
# key_store.accumulator_key = <not set by default>
#
# IMPORTANT: When publishing with accumulator_key defined,
# max_batch_size must be decreased to 7
# exporter.max_batch_size = 7

# The interval with which to poll account information.
# oracle.poll_interval_duration = "2m"

# Whether subscribing to account updates over websocket is enabled
# oracle.subscriber_enabled = true

# Ask the Solana RPC for up to this many product/price accounts in a
# single request. Tune this setting if you're experiencing timeouts on
# data fetching. In order to keep concurrent open socket count at bay,
# the batches are looked up sequentially, trading off overall time it
# takes to fetch all symbols.
# oracle.max_lookup_batch_size = 100

# How often to refresh the cached network state (current slot and blockhash).
# It is recommended to set this to slightly less than the network's block time,
# as the slot fetched will be used as the time of the price update.
# exporter.refresh_network_state_interval_duration = "200ms"

# Duration of the interval at which to publish updates
# exporter.publish_interval_duration = "1s"

# Age after which a price update is considered stale and not published
# exporter.staleness_threshold = "5s"

# Wait at least this long before publishing an unchanged price
# state; unchanged price state means only timestamp has changed
# with other state identical to last published state.
# exporter.unchanged_publish_threshold = "5s"

# Maximum size of a batch
# exporter.max_batch_size = 12

# Number of compute units requested per update_price instruction within the transaction.
# exporter.compute_unit_limit = 20000

# Price per compute unit offered for update_price transactions
# exporter.compute_unit_price_micro_lamports =

# Duration of the interval with which to poll the status of transactions.
# It is recommended to set this to a value close to exporter.publish_interval_duration
# exporter.transaction_monitor.poll_interval_duration = "4s"

# Maximum number of recent transactions to monitor. When this number is exceeded,
# the oldest transactions are no longer monitored. It is recommended to set this to
# a value at least as large as (number of products published / number of products in a batch).
# exporter.transaction_monitor.max_transactions = "100"

### Optional config sections ###

## Metrics server section ##

# [metrics_server]
#
# Where to serve the quick-access dashboard and metrics. Metrics live under "/metrics"
# NOTE: non-loopback addresses must be used carefully, making sure the
# connection is not exposed for unauthorized access.
# bind_address = "127.0.0.1:8888"

## Remote keypair loader section. ##

# [remote_keypair_loader}
# Where to serve the remote keypair loading endpoint, under
# "/primary/load_keypair" and "/secondary/load_keypair".
#
# NOTE: non-loopback addresses must be used carefully, making sure the
# connection is not exposed for unauthorized access.
# bind_address = "127.0.0.1:9001"

# How much whole SOL must a keypair hold to be considered valid for
# use on a given network. Disabled with 0.
# primary_min_keypair_balance_sol = 1
# secondary_min_keypair_balance_sol = 1


## Channel capacities section. ##

# These refer to async messaging channels
# internally used by the agent's subroutines

# [channel_capacities]
# Capacity of the channel used to broadcast shutdown events to all
# components
# shutdown = 10000

# Capacity of the channel used to send updates from the primary Oracle
# to the Global Store
# primary_oracle_updates = 10000

# Capacity of the channel used to send updates from the secondary
# Oracle to the Global Store
# secondary_oracle_updates = 10000

# Capacity of the channel the Pythd API Adapter uses to send lookup
# requests to the Global Store
# global_store_lookup = 10000

# Capacity of the channel the Pythd API Adapter uses to communicate
# with the Local Store
# local_store_lookup = 10000

# Capacity of the channel on which the Local Store receives messages
# local_store = 10000

# Capacity of the channel on which the Pythd API Adapter receives
# messages
# pythd_adapter = 10000

# Capacity of the slog logging channel. Adjust this value if you see
# complaints about channel capacity from slog
# logger_buffer = 10000


## JRPC API config section. ##

# [pythd_adapter]
# The duration of the interval at which `notify_price_sched` notifications will be sent.
# Note that this doesn't affect the rate at which transactions are published:
# this is soley a backwards-compatibility API feature.
# notify_price_sched_interval_duration = "1s"

## Optional secondary network section ##

# Configuration for the optional secondary network this agent will
# publish data to. In most cases this should be a Solana endpoint. The
# options correspond to the ones in primary_network
# [secondary_network]
